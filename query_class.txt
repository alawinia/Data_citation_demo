Query class:

take v(f,tx):- family(f,n,ty), introduction(f,tx) as an example

attributes:

String head; // query or view name; e.g. name = "v";

Subgoal head; // head of query or view e.g. head = v(f,tx)

Vector<Subgoal> body; //subgoals of view or query

Vector<Lambda_term> lambda_term;  // lambda_terms of views

Vector<Conditions> conditions; // conditions of query and view


construction function:

public Query(String name, Subgoal head, Vector<Subgoal> body, Vector<Lambda_term> lambda_term, Vector<Conditions> conditions)
________________________________________________________________


Subgoal class:

String name; // name of subgoal e.g. name of subgoal family(f,n,ty) should be "family";

Vector<Argument> args // arguments of subgoal

Construction function
public Subgoal(String name, Vector args)

_________________________________________________________________


Argument class:

int type; //0 stands for variables, 1 stands for constants

String name; //name of argument, if the name of attribute starts with Single quotation marks(') and ends with Single quotation marks('), then this argument should be a constant, type = 1, otherwise it is still a variable

String origin_name; //the argument's origin name in database, e.g. in subgoal family(f,n,ty), the name of argument f should be f, but in the family table of IUPHAR database, the name f stands for the attribute family_id, so the origin_name of this argument should be family_id


Construction function:
public Argument(String name, String lambda_term)

__________________________________________________________________


Lambda_term class

String name; //origin name in the database of this lambda_term variable

String table_name; // the table which the lambda_term belongs to


construction function:
public Lambda_term(String name, String table_name)


___________________________________________________________________

Condition class: // contains "=", "<>", ">", "<", ">=", "<=" operations



String subgoal1; //the base relation in which the left operand locates

Argument arg1; // argument of left operand
	
Argument arg2; // argument of right operand
		
String subgoal2; //the base relation in which the right operand locates (if arg2 is a constant value, then it is null)
	
Operation op; // there are six subclasses corresponding to six oeprations separately:
class op_equal() -> "="   construction function: new op_equal()
class op_greate_equal() -> ">=" construction function: new op_greate_equal()
class op_greater() -> ">"   construction function: new op_greater()
class op_less_equal() -> "<=" construction function: new op_less_equal()
class op_less() -> "<" construction function: new op_less()
class op_not_equal() -> "<>" construction function: new op_not_equal()

Construction function:

Conditions(Argument arg1, String subgoal1, Operation op, Argument arg2, String subgoal2)


_____________________________________________________________________________

Example usage:

Given a query \lambda_term f v(f,tx):- family(f,n,ty), introduction(f,tx)
I prefer to write it as 
\lambda_term f1 v(f1, f2, tx):- family(f1,n,ty), introduction(f2,tx), f1 = f2

How to construct corresponding Query class:

1. create subgoal head v(f1, f2 ,tx): 
 //create arguments for f1, f2, tx 
 v1 = new Argument("f1", "family_id");
 v2 = new Argument("f2", "family_id");
 v3 = new Argument("tx", "type");
 Vector<Argument> head_vec = {v1, v2, v3}
 //create subgoal v
 code:   new Subgoal("v", vec)

2. create subgoal vector for this query, get Vector<Subgoal> subgoals (use similar approach to create subgoals for family and introduction and then put them into a vector)
3. create lambda_term:
   l = new Lambda_term("family_id", "family");
   put it into a vector lambda_term_vec;
4. create conditions:
   condition = new Conditions(v1, "subgoal1", new op_equal(), v2, "subgoal2");
   put it into a vector condition_vec;
   
	
5. create new Query()
   new Query("v", head_vec, subgoals, lambda_term_vec, condition_vec);


